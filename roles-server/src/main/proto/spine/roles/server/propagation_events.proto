//
// Copyright 2020, TeamDev. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

syntax = "proto3";

package spine.roles;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.roles.server.event";
option java_outer_classname = "PropagationEventsProto";
option java_multiple_files = true;
option java_generate_equals_and_hash = true;

import "spine/core/user_id.proto";
import "spine/users/identifiers.proto";
import "spine/roles/identifiers.proto";

// The role of the group is propagated to the user.
//
// Example scenarios:
//  1) The user is added to the group and the group has this role.
//  2) The user belongs to the group and the role is assigned to the group.
//
message RolePropagatedToUser {

    // The user to whom the role is propagated.
    core.UserId user = 1 [(required) = true];

    // The group to which the user belongs.
    users.GroupId group = 2 [(required) = true];

    // The propagated role.
    RoleId role = 3 [(required) = true];
}

// The role is no longer propagated to the user.
//
// Example scenarios:
//  1) The user is removed from the group, which has this role assigned.
//  2) The user belongs to the group, and the role assignment is removed from the group.
//
message RolePropagationCanceledForUser {

    // The user for whom the role is no longer propagated.
    core.UserId user = 1 [(required) = true];

    // The group the user belongs to, or belonged before the event.
    users.GroupId group = 2 [(required) = true];

    // The role propagation of which is canceled for the user.
    RoleId role = 3 [(required) = true];
}

// The role is propagated to the group because it is nested into another group.
//
// Example scenarios:
//  1) The parent group has the role explicitly assigned.
//  2) The parent group got the role because of propagation.
//  3) This group was added to the group which already has the role (either assigned or propagated).
//
message RolePropagatedToGroup {

    // The group to which the role is propagated.
    users.GroupId child = 1 [(required) = true];

    // The group through which the role is propagated.
    users.GroupId parent = 2 [(required) = true];

    // The propagated role.
    RoleId role = 3 [(required) = true];
}

// The role is no longer propagated to the group.
//
// Example scenarios:
//  1) The group is removed from the group, which has this role assigned or propagated.
//  2) The group belongs to the group, to which the role assignment is removed, or
//     no longer propagated.
//
message RolePropagationCanceledForGroup {

}
