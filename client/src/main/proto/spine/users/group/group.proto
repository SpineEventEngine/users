//
// Copyright 2019, TeamDev. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

syntax = "proto3";

package spine.users.group;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.users.group";
option java_outer_classname = "GroupProto";
option java_multiple_files = true;
option java_generate_equals_and_hash = true;

import "spine/core/user_id.proto";
import "spine/net/internet_domain.proto";
import "spine/net/email_address.proto";
import "spine/users/identifiers.proto";

// A `Group` is a way to group users by their common functions and functional roles inside of
// an organization or organizational unit.
//
message Group {
    option (entity).kind = AGGREGATE;

    GroupId id = 1;

    // A name of a group to display on UI.
    string display_name = 2 [(required) = true];

    // An email address of the group if applicable.
    //
    // The email address may be used to send messages to all the group members.
    //
    net.EmailAddress email = 3;

    // A human-friendly description of a group.
    string description = 4;

    // An entity a group belongs to.
    oneof origin {

        // An organization or org. unit in one of the tenant's domains.
        OrganizationOrUnit org_entity = 5;

        // An external domain.
        net.InternetDomain external_domain = 6;
    }
}

// A group's membership in other groups, a part of the `Group` aggregate.
//
// It is forbidden for groups to directly or indirectly join themselves; in other words,
// all nested group memberships must always form an acyclic graph.
//
message GroupMembership {
    option (entity).kind = AGGREGATE;

    GroupId id = 1;

    // Other groups this group is a member of.
    repeated GroupId membership = 2;
}

// A user membership in multiple groups, a part of `User` aggregate.
//
// If a `User` shares its functions and roles with a number of other users they can join
// one or more `Group`s (please see `JoinGroup`, `LeaveGroup` commands).
//
message UserMembership {
    option (entity).kind = AGGREGATE;

    core.UserId id = 1;

    // The group memberships of a `User`.
    repeated UserMembershipRecord membership = 2;
}

//TODO:2020-03-30:alexander.yevsyukov: Move under the Membership type
// A single record about a membership in the aggregate part.
//
message UserMembershipRecord {

    // An ID of a group.
    GroupId group_id = 1 [(required) = true];

    // A role of a user in the group.
    RoleInGroup role = 2 [(required) = true];
}

//TODO:2020-03-30:alexander.yevsyukov: Move under the Membership type
// A role of the `User` as a member of the group.
//
// This role defines whether a user is a regular member or can manage the group.
//
enum RoleInGroup {

    // The default value.
    RIG_UNKNOWN = 0;

    // A regular member of a group: can't add or remove members, rename the group, etc.
    MEMBER = 1;

    // A privileged member with permissions to manage the group.
    PRIVILEGED = 2; //TODO:2020-03-30:alexander.yevsyukov: Rename to MANAGER

    // A person who can delete the group and add manage other owners.
    OWNER = 3;
}

