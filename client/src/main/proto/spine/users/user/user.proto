//
// Copyright 2019, TeamDev. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

syntax = "proto3";

package spine.users.user;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.users.user";
option java_outer_classname = "UserProto";
option java_multiple_files = true;
option java_generate_equals_and_hash = true;

import "google/protobuf/timestamp.proto";
import "spine/core/user_id.proto";
import "spine/net/internet_domain.proto";
import "spine/net/email_address.proto";
import "spine/users/identifiers.proto";
import "spine/users/profiles.proto";

//TODO:2020-03-30:alexander.yevsyukov: Rename to UserAccount
// A user of the application, either a person or machine.
//
// A user is a leaf in the hierarchical structure of the organization. It can have either
// a single `Organization` or single `OrgUnit` as a parent organizational entity.
//
message User {
    option (entity).kind = AGGREGATE;

    core.UserId id = 1;

    //TODO:2020-03-30:alexander.yevsyukov: Have oneof instead which switches between PersonProfile and ServiceProfile.
    // Nature of a user: a person or machine.
    UserNature nature = 2 [(required) = true];

    // A user name to be displayed on UI.
    string display_name = 3 [(required) = true];

    // An email address of a user.
    net.EmailAddress email = 4;

    // General profile information for a user, if applicable.
    PersonProfile profile = 7;
}

// Enumerates possible statuses of a user account
enum AccountStatus {

    // The default value.
    ACCOUNT_STATUS_UNKNOWN = 0;

    // The user account is created but not yet ready to work.
    //
    // For example, the user hasn't accepted an invitation yet or hasn't finished registration.
    //
    PENDING = 1;

    // The user account is ready to work.
    ACTIVE = 2;

    // The user account was suspended.
    SUSPENDED = 3;
}

// Contains a status of a user account.
message UserAccountStatus {

    option (entity).kind = AGGREGATE;

    // The ID of the user account.
    core.UserId id = 1;

    // The value of the status.
    AccountStatus value = 2 [(required) = true];
}

// The fundamental kind of `User`.
//
enum UserNature {

    //TODO:2020-03-30:alexander.yevsyukov: Remove in favor of oneof under UserAccount
    // The default value.
    UN_UNKNOWN = 0;

    // A `User` represents a person and acts on behalf of this person.
    PERSON = 1;

    // A `User` is a machine, a service account, which acts on behalf of an inanimate entity
    // such as a printer, a CRON job, a bot.
    //
    MACHINE = 2;

    // A user is external and its nature is unknown.
    UNAVAILABLE = 3;
}
