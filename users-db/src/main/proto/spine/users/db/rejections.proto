//
// Copyright 2019, TeamDev. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

syntax = "proto3";

package spine.users.db;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.users.db.rejection";
option java_multiple_files = false;
option java_generate_equals_and_hash = true;

import "spine/core/user_id.proto";
import "spine/users/identifiers.proto";

// A command requested creation of a new user account,
// but the account with such ID already exists.
message UserAccountAlreadyExists {

    // The ID of the account.
    core.UserId account = 1;
}

// A command requested deletion of a user account,
// but the account is already marked as deleted.
message UserAccountAlreadyTerminated {

    // The ID of the account.
    core.UserId account = 1;
}

// A command requested suspension of a user account,
// but the account is already suspended.
message UserAccountAlreadySuspended {

    // The ID of the account.
    core.UserId account = 1;
}

// An operation requested by a command is not available for an account which is marked
// as deleted. Or, the account with such ID was never created.
message UserAccountDoesNotExist {

    // The ID that the command used to reference the account.
    core.UserId account = 1;
}

// An operation is not available because an account with the passed ID was previously deleted.
message UnavailableForTerminatedAccount {

    // The ID of the account which existed before.
    core.UserId account = 1;
}

// A command requests creation of a group with an ID which already assigned to another group.
message GroupAlreadyExists {

    // The ID of the group which the creation command used.
    GroupId group = 1 [(required) = true];
}

// A command requested removal of a user from a group, but the user is not a member of the group.
message UserIsNotMember {

    // The group from which removal of the user was requested.
    GroupId group = 1 [(required) = true];

    // The user removal of whom from the group was requested.
    core.UserId missing_user = 2 [(required) = true];
}

// A command requested removal of a group, but it is not a member of a group removal from which
// was requested.
message GroupIsNotMember {

    // The group from which removal of the group was requested.
    GroupId parent_group = 1 [(required) = true];

    // The group removal of which from the group was requested.
    GroupId missing_group = 2 [(required) = true];
}

// A command requested adding a group to another group, but the group to be added
// already presents in the nesting hierarchy.
message GroupsCannotFormCycles {

    // The parent group to which addition of the group requested.
    GroupId parent_group = 1 [(required) = true];

    // The group that closes a cycle.
    GroupId closing_group = 2 [(required) = true];
}

// An operation is not available because a group with the passed ID was previously deleted.
message UnavailableForDeletedGroup {

    // The ID of the group which was previously deleted.
    GroupId group = 1 [(required) = true];
}
