//
// Copyright 2020, TeamDev. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

syntax = "proto3";

package spine.users.db;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.users.db";
option java_outer_classname = "GroupProto";
option java_multiple_files = true;
option java_generate_equals_and_hash = true;

import "spine/core/user_id.proto";
import "spine/net/email_address.proto";
import "spine/users/identifiers.proto";
import "spine/users/membership.proto";

// A group gathers users on a common purpose of collaboration.
//
// Users can be added to the group directly, or via other groups added to this group.
//
message Group {
    option (entity).kind = AGGREGATE;

    // The ID of the group.
    GroupId id = 1;

    // A name of a group to display on UI.
    string display_name = 2 [(required) = true];

    // A text describing the purpose of the group.
    string description = 3;

    // An email address of the group, if applicable.
    //
    // The email address may be used to send messages to all the group members.
    //
    net.EmailAddress email = 4;
}

// Provides information about users and groups added to a given group.
message GroupMembers {
    option (entity).kind = AGGREGATE;

    // The ID of the group.
    GroupId id = 1;

    // Members added directly to this group.
    repeated Member member = 2;
}
