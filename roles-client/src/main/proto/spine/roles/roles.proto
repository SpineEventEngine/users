//
// Copyright 2020, TeamDev. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

syntax = "proto3";

package spine.roles;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.roles";
option java_outer_classname = "RoleProto";
option java_multiple_files = true;
option java_generate_equals_and_hash = true;

import "spine/core/user_id.proto";
import "spine/users/identifiers.proto";
import "spine/roles/identifiers.proto";

// The ability to do something in the system, which can be assigned to a user or a group.
//
// If assigned to a group, the role is propagated to users belonging to the group and
// to other groups nested into this group.
//
message Role {
    option (entity).kind = AGGREGATE;

    // The ID of the role.
    RoleId id = 1;

    // The name of the role to be displayed in the UI.
    string display_name = 2;

    // Longer text which describes the role.
    string description = 3;
}

// Provides information on roles that a user has.
//
// Roles can be explicitly assigned to the user, or gained implicitly through
// the groups the user belongs to.
//
message UserRoles {
    option (entity).kind = AGGREGATE;

    // The ID of the user.
    core.UserId user = 1;

    // Explicitly assigned roles.
    repeated RoleId assigned = 2;

    // Roles that the user obtains through membership in groups.
    repeated RoleId propagated = 3;
}

// Provides information on roles that a group has.
//
// Roles can be explicitly assigned to the group, or gained implicitly through
// the groups this groups belongs to.
//
message GroupRoles {
    option (entity).kind = AGGREGATE;

    // The ID of the group.
    users.GroupId group = 1;

    // Explicitly assigned roles.
    repeated RoleId assigned = 2;

    // Roles that the group obtains through membership in other groups.
    repeated RoleId propagated = 3;
}
