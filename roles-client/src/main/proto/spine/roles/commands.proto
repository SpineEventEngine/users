//
// Copyright 2019, TeamDev. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

syntax = "proto3";

package spine.roles;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.roles.command";
option java_outer_classname = "CommandsProto";
option java_multiple_files = true;
option java_generate_equals_and_hash = true;

import "spine/core/user_id.proto";
import "spine/users/identifiers.proto";
import "spine/roles/identifiers.proto";

// Creates a role.
message CreateRole {

    // The ID of the new role.
    RoleId role = 1;

    // The text to show the role name in the UI.
    string display_name = 2;

    // Longer text which describes the role.
    string description = 3;
}

// Deletes a role from the system.
message DeleteRole {

    // The role to delete.
    RoleId role = 1;
}

// Assigns a role to a user.
message AssignRoleToUser {

    // The user to whom the role is assigned.
    core.UserId user = 1;

    // The role to assign.
    RoleId role = 2 [(required) = true];
}

// Removes a role assignment from a user.
message RemoveRoleAssignmentFromUser {

    // The user from whom the role assignment is removed.
    core.UserId user = 1;

    // The role assigment of which to remove.
    RoleId role = 2 [(required) = true];
}

// Assigns a role to the group.
message AssignRoleToGroup {

    // The group to which assign the role.
    users.GroupId group = 1;

    // The role to assign.
    RoleId role = 2 [(required) = true];
}

// Removes a role assignment from the group.
message RemoveRoleAssignmentFromGroup {

    // The group from which the role assignment is removed.
    users.GroupId group = 1;

    // The role assignment of which to remove.
    RoleId role = 2 [(required) = true];
}
