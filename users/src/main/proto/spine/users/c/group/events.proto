//
// Copyright (c) 2000-2018 TeamDev. All rights reserved.
// TeamDev PROPRIETARY and CONFIDENTIAL.
// Use is subject to license terms.
//

syntax = "proto3";

package spine.users.c.group;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.users.c.group";
option java_outer_classname = "EventsProto";
option java_multiple_files = true;
option java_generate_equals_and_hash = true;

import "google/protobuf/any.proto";
import "spine/core/user_id.proto";
import "spine/users/identifiers.proto";
import "spine/users/values.proto";

// The event is emitted when a new group is created.
//
message GroupCreated {
    option (required_field) = "unit|organization";

    GroupId id = 1;

    // The name of a group to display on UI.
    string display_name = 2 [(required) = true];

    // The roles assigned to the user directly (aka not propagated by a group membership).
    repeated RoleId role = 3;

    // The parent entity in the organizational structure.
    ParentEntity parent_entity = 4 [(required) = true];

    // The attributes of the group.
    map<string, google.protobuf.Any> attributes = 5;

    // The owner of the group.
    spine.core.UserId owner = 6 [(required) = true];
}

// The event is emitted when an owner of a group is changed.
//
message GroupOwnerChanged {

    GroupId id = 1;

    // The ID of the new owner.
    spine.core.UserId new_owner = 2 [(required) = true];

    // The ID of the old owner.
    spine.core.UserId old_owner = 3 [(required) = true];
}

// The event is emitted when a group is moved to another organization or orgunit.
//
message GroupMoved {
    option (required_field) = "unit|organization";

    GroupId id = 1;

    // The new parent entity in the organizational structure.
    ParentEntity new_parent_entity = 2 [(required) = true];

    // The former parent entity in the organizational structure.
    ParentEntity old_parent_entity = 3 [(required) = true];
}

// The event is emitted when a group became a member of another group.
//
message NestedGroupMembershipStarted {

    GroupId id = 1;

    // The ID of the upper group.
    GroupId group_id = 2 [(required) = true];
}

// The event is emitted when a group stopped being a member of another.
//
message GroupMembershipStopped {

    GroupId id = 1;

    // The ID of the upper group.
    GroupId upper_group_id = 2 [(required) = true];
}

// The event is emitted when a new group is deleted.
//
message GroupDeleted {

    GroupId id = 1;
}

// The event is emitted when a role is assigned to the group.
//
message RoleAssignedToGroup {

    GroupId id = 1;

    // The ID of the assigned role.
    RoleId role_id = 2 [(required) = true];
}

// The event is emitted when a role is unassigned from the group.
//
message RoleUnassignedFromGroup {

    GroupId id = 1;

    // The ID of the unassigned role.
    RoleId role_id = 2 [(required) = true];
}

// The event is emitted when an attribute of the orgunit is added.
//
message GroupAttributeAdded {

    GroupId id = 1;

    // An attribute name.
    string name = 2 [(required) = true];

    // An attribute value.
    google.protobuf.Any value = 3 [(required) = true];
}

// The event is emitted when an attribute of the group is removed.
//
message GroupAttributeRemoved {

    GroupId id = 1;

    // An attribute name.
    string name = 2 [(required) = true];

    // An attribute value.
    google.protobuf.Any value = 3 [(required) = true];
}

// The event is emitted when an attribute of the group is updated.
//
message GroupAttributeUpdated {

    GroupId id = 1;

    // An attribute name.
    string name = 2 [(required) = true];

    // An old attribute value.
    google.protobuf.Any old_value = 4 [(required) = true];

    // A new attribute value.
    google.protobuf.Any new_value = 5 [(required) = true];
}
