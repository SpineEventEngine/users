//
// Copyright (c) 2000-2018 TeamDev. All rights reserved.
// TeamDev PROPRIETARY and CONFIDENTIAL.
// Use is subject to license terms.
//

syntax = "proto3";

package spine.users.c.orgunit;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.users.c.orgunit";
option java_outer_classname = "CommandsProto";
option java_multiple_files = true;
option java_generate_equals_and_hash = true;

import "google/protobuf/any.proto";
import "spine/core/user_id.proto";
import "spine/net/internet_domain.proto";
import "spine/users/identifiers.proto";
import "spine/users/values.proto";

// The command to create an organizational unit.
//
message CreateOrgUnit {
    option (events) = "OrgUnitCreated";
    option (rejections) = "OrgUnitsCanNotFormCycles";

    OrgUnitId id = 1;

    // A name of the orgunit to display on UI.
    string display_name = 2 [(required) = true];

    // An interent domain of the orgunit.
    net.InternetDomain domain = 3;

    // A parent entity in the organizational structure.
    ParentEntity parent_entity = 4 [(required) = true];

    // Attributes of the orgunit.
    map<string, google.protobuf.Any> attributes = 5;

    // An orgunit owner.
    core.UserId owner = 6 [(required) = true];
}

// The command to change the owner of an orgunit.
//
message ChangeOrgUnitOwner {
    option (events) = "OrgUnitOwnerChanged";

    OrgUnitId id = 1;

    // An ID of the owner.
    core.UserId new_owner = 2 [(required) = true];
}

// The command to move an orgunit from one organization or orgunit to another.
//
message MoveOrgUnit {
    option (events) = "OrgUnitMoved";
    option (rejections) = "OrgUnitsCanNotFormCycles";

    OrgUnitId id = 1;

    // A new parent entity of the orgunit.
    ParentEntity new_parent_entity = 2 [(required) = true];
}

// The command to delete an orgunit.
//
message DeleteOrgUnit {
    option (events) = "OrgUnitDeleted";

    OrgUnitId id = 1;
}

// The command to add a new attribute to an orgunit.
//
// If an attribute with this name already exists it will be overwritten.
//
message AddOrgUnitAttribute {
    option (events) = "OrgUnitAttributeAdded";

    OrgUnitId id = 1;

    // An attribute name.
    string name = 2 [(required) = true];

    // An attribute value.
    google.protobuf.Any value = 3 [(required) = true];
}

// The command to remove an attribute from an orgunit.
//
message RemoveOrgUnitAttribute {
    option (events) = "OrgUnitAttributeRemoved";
    option (rejections) = "OrgUnitAttributeDoesNotExist";

    OrgUnitId id = 1;

    // A name of the attribute to remove.
    string name = 2 [(required) = true];
}

// The command to update an orgunit attribute.
//
message UpdateOrgUnitAttribute {
    option (events) = "OrgUnitAttributeUpdated";
    option (rejections) = "OrgUnitAttributeDoesNotExist";

    OrgUnitId id = 1;

    // An attribute name.
    string name = 2 [(required) = true];

    // A new attribute value.
    google.protobuf.Any new_value = 3 [(required) = true];
}

// The command to rename an orgunit.
//
message RenameOrgUnit {
    option (events) = "OrgUnitRenamed";

    OrgUnitId id = 1;

    // A new name of the orgunit.
    string new_name = 2 [(required) = true];
}

// The command to change an orgunit domain.
//
message ChangeOrgUnitDomain {
    option (events) = "OrgUnitDomainChanged";

    OrgUnitId id = 1;

    // A new domain of the orgunit.
    net.InternetDomain new_domain = 2 [(required) = true];
}
