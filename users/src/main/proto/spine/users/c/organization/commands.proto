//
// Copyright 2018, TeamDev. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

syntax = "proto3";

package spine.users.c.organization;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.users.c.organization";
option java_outer_classname = "CommandsProto";
option java_multiple_files = true;
option java_generate_equals_and_hash = true;

import "google/protobuf/any.proto";
import "spine/core/tenant_id.proto";
import "spine/core/user_id.proto";
import "spine/net/internet_domain.proto";
import "spine/users/identifiers.proto";

// Creates an organization.
//
message CreateOrganization {
    option (events) = "OrganizationCreated";

    OrganizationId id = 1;

    // A name of an organization to display on UI.
    string display_name = 2 [(required) = true];

    // The domain of the organization.
    net.InternetDomain domain = 3;

    // Attributes of the organization.
    map<string, google.protobuf.Any> attributes = 4;

    // A tenant associated with the organization.
    core.TenantId tenant = 5 [(required) = true];
}

// Deletes an organization.
//
message DeleteOrganization {
    option (events) = "OrganizationDeleted";

    OrganizationId id = 1;
}

// Adds a new attribute to an organization.
//
// If an attribute with this name already exists it will be overwritten.
//
message AddOrganizationAttribute {
    option (events) = "OrganizationAttributeAdded";

    OrganizationId id = 1;

    // An attribute name.
    string name = 2 [(required) = true];

    // An attribute value.
    google.protobuf.Any value = 3 [(required) = true];
}

// Removes an attribute from an organization.
//
message RemoveOrganizationAttribute {
    option (events) = "OrganizationAttributeRemoved";
    option (rejections) = "OrganizationAttributeDoesNotExist";

    OrganizationId id = 1;

    // A name of the attribute to remove.
    string name = 2 [(required) = true];
}

// Updates an organization attribute.
//
message UpdateOrganizationAttribute {
    option (events) = "OrganizationAttributeUpdated";
    option (rejections) = "OrganizationAttributeDoesNotExist";

    OrganizationId id = 1;

    // An attribute name.
    string name = 2 [(required) = true];

    // A new attribute value.
    google.protobuf.Any new_value = 3 [(required) = true];
}

// Renames an organization.
//
message RenameOrganization {
    option (events) = "OrganizationRenamed";

    OrganizationId id = 1;

    // A new name of the organization.
    string new_name = 2 [(required) = true];
}

// Changes an organization domain.
//
message ChangeOrganizationDomain {
    option (events) = "OrganizationDomainChanged";

    OrganizationId id = 1;

    // A new domain of the organization.
    net.InternetDomain new_domain = 2 [(required) = true];
}

// Changes an organization tenant.
//
message ChangeOrganizationTenant {
    option (events) = "OrganizationTenantChanged";

    OrganizationId id = 1;

    // A new tenant associated with the organization.
    core.TenantId new_tenant = 2 [(required) = true];
}
