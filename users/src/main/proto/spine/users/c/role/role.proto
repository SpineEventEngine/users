//
// Copyright 2018, TeamDev. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

syntax = "proto3";

package spine.users.c.role;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.users.c.role";
option java_outer_classname = "RoleProto";
option java_multiple_files = true;
option java_generate_equals_and_hash = true;

import "spine/users/identifiers.proto";
import "spine/users/values.proto";

// A role that can be assigned to `Users` and `Groups`, to perform access control.
//
// Roles are assigned to `Users` and `Group` directly and explicitly (please, see `AssignRoleToUser`,
// `AssignRoleToUser` commands). A `Role` exists in the scope of an organization or an orgunit,
// therefore it can be assigned only to those `Users` and `Groups` that are in the same organization
// and/or orgunit (or their child orgunits).
//
// ## Access Control
//
// The roles assigned to a `Group` are recursively propagated to all members of the group.
// This propagation is implicit and is not reflected in aggregate states.
//
// Therefore, when carrying out role-based access control, consider that a `User` or a `Group`
// has not only the roles listed in the aggregate state but effectively all the roles derived from
// parent groups.
//
// ## Case Study
//
// Here is a simple case study to facilitate understanding of the roles.
// Consider the following organizational structure:
//
// ```
//          Chips & Cookies            <-- Organization
//            /          \
//      Accounting   Cookie Factory    <-- OrgUnit
//          /   \         \
//         /   John Doe  Jack Jackson  <-- User
//        /
//  external_auditors                  <-- Group
//       |
//   Jane Smith                        <-- User
// ```
//
// Here are the statements about "Chips & Cookies" that will help you gain intuition on
// how to apply roles in your application:
//
// 1. If `office-visitor` role belongs to "Chips & Cookies" organization it can be assigned to any
//    user or group depicted above.
// 2. If `color-printer-user` role belongs to "Accounting" orgunit it can be assigned only to
//    John Doe, Jane Smith, and `external_audior` group.
// 3. If `bank-account-reader` role is assigned to `external_auditors` group, Jane Smith as a member
//    of the group implicitly has this role too.
// 4. If `3rd-floor-visitor` role is assigned to Jane Smith, she effectively has both this role
//    and all roles from `external_auditors` group.
// 5. Jack Jackson can't be assigned `color-printer-user` role because it belongs to another
//    organizational unit.
//
message Role {
    option (entity).kind = AGGREGATE;

    users.RoleId id = 1;

    // A name of the role to be displayed on UI.
    string display_name = 2 [(required) = true];

    // An organization or organizational unit the role belongs to.
    OrganizationOrUnit org_entity = 3;
}
