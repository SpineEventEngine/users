//
// Copyright 2018, TeamDev. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

syntax = "proto3";

package spine.users.c.user;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.users.c.user";
option java_outer_classname = "CommandsProto";
option java_multiple_files = true;
option java_generate_equals_and_hash = true;

import "google/protobuf/any.proto";
import "spine/core/user_id.proto";
import "spine/users/identifiers.proto";
import "spine/users/values.proto";
import "spine/users/c/user/user.proto";
import "spine/users/user_auth_identity.proto";
import "spine/users/person_profile.proto";

// Creates a new user.
//
message CreateUser {
    option (events) = "UserCreated";

    core.UserId id = 1;

    // A kind of user: a person or machine.
    UserKind kind = 2 [(required) = true];

    // A user name to be displayed on UI.
    string display_name = 3 [(required) = true];

    // Roles explicitly assigned to the user.
    repeated RoleId role = 4;

    // An entity in the organizational structure the user belongs to, if applicable.
    OrganizationOrUnit org_entity = 5;

    // Attributes of the user.
    map<string, google.protobuf.Any> attributes = 6;

    // The primary authentication identity of the user.
    UserAuthIdentity primary_identity = 7 [(required) = true];

    // A user profile.
    PersonProfile profile = 8;

    // The current status of the user.
    User.Status status = 9 [(required) = true];
}

// Moves a user from one organization or organizational unit to another.
//
message MoveUser {
    option (events) = "UserMoved";

    core.UserId id = 1;

    // A new parent entity in the organizational structure.
    OrganizationOrUnit new_org_entity = 2 [(required) = true];
}

// Joins the group.
//
message JoinGroup {
    option (events) = "UserJoinedGroup";

    core.UserId id = 1;

    // An ID of a group.
    GroupId group_id = 2 [(required) = true];
}

// Leaves the group.
//
message LeaveGroup {
    option (events) = "UserLeftGroup";

    core.UserId id = 1;

    // An ID of a group.
    GroupId group_id = 2 [(required) = true];
}

// Deletes a user.
//
message DeleteUser {
    option (events) = "UserDeleted";

    core.UserId id = 1;
}

// Assigns a role to a user.
//
message AssignRoleToUser {
    option (events) = "RoleAssignedToUser";

    core.UserId id = 1;

    // An ID of the role to assign.
    RoleId role_id = 2 [(required) = true];
}

// Removes a role assignment from a user.
//
message UnassignRoleFromUser {
    option (events) = "RoleUnassignedFromUser";
    option (rejections) = "RoleIsNotAssignedToUser";

    core.UserId id = 1;

    // An ID of the role to unassign.
    RoleId role_id = 2 [(required) = true];
}

// Adds a new attribute to a user.
//
// If an attribute with this name already exists it will be overwritten.
//
message AddUserAttribute {
    option (events) = "UserAttributeAdded";

    core.UserId id = 1;

    // An attribute name.
    string name = 2 [(required) = true];

    // An attribute value.
    google.protobuf.Any value = 3 [(required) = true];
}

// Removes an attribute from a user.
//
message RemoveUserAttribute {
    option (events) = "UserAttributeRemoved";
    option (rejections) = "UserAttributeDoesNotExist";

    core.UserId id = 1;

    // A name of the attribute to remove.
    string name = 2 [(required) = true];
}

// Updates a user attribute.
//
message UpdateUserAttribute {
    option (events) = "UserAttributeUpdated";
    option (rejections) = "UserAttributeDoesNotExist";

    core.UserId id = 1;

    // An attribute name.
    string name = 2 [(required) = true];

    // A new attribute value.
    google.protobuf.Any new_value = 3 [(required) = true];
}

// Changes the user status.
//
message ChangeUserStatus {
    option (events) = "UserStatusChanged";

    core.UserId id = 1;

    // A new status.
    User.Status status = 2 [(required) = true];
}

// Adds a new secondary authentication identity to the user.
//
message AddSecondaryAuthIdentity {
    option (events) = "SecondaryAuthIdentityAdded";

    core.UserId id = 1;

    // An identity to add.
    UserAuthIdentity identity = 2 [(required) = true];
}

// Removes a secondary authentication identity of the user.
//
message RemoveSecondaryAuthIdentity {
    option (events) = "SecondaryAuthIdentityRemoved";
    option (rejections) = "AuthIdentityDoesNotExist";

    core.UserId id = 1;

    // A user identifier as specified by the authentication provider.
    string user_id = 2 [(required) = true];

    // A unique identifier of the authentication provider.
    IdentityProviderId provider_id = 3 [(required) = true];
}

// Changes the primary authentication identity.
//
message ChangePrimaryAuthIdentity {
    option (events) = "PrimaryAuthIdentityChanged";

    core.UserId id = 1;

    // A new primary identity.
    UserAuthIdentity identity = 2 [(required) = true];
}

// Renames a user.
//
message RenameUser {
    option (events) = "UserRenamed";

    core.UserId id = 1;

    // A new name of a user.
    string new_name = 2 [(required) = true];
}

// Updates a user profile.
//
message UpdateUserProfile {
    option (events) = "UserProfileUpdated";

    core.UserId id = 1;

    // An updated version of a profile.
    PersonProfile updated_profile = 2 [(required) = true];
}
