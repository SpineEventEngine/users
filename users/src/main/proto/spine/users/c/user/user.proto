//
// Copyright (c) 2000-2018 TeamDev. All rights reserved.
// TeamDev PROPRIETARY and CONFIDENTIAL.
// Use is subject to license terms.
//

syntax = "proto3";

package spine.users.c.user;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.users.c.user";
option java_outer_classname = "UserProto";
option java_multiple_files = true;
option java_generate_equals_and_hash = true;

import "google/protobuf/any.proto";
import "spine/core/user_id.proto";
import "spine/time/time.proto";
import "spine/users/identifiers.proto";
import "spine/users/values.proto";
import "spine/users/user_profile.proto";
import "spine/users/user_auth_identity.proto";

// A user of the application, either a person or machine.
//
// ## Group And Roles
//
// To reflect a user's functions and functional roles in the organization, the user can be assigned
// multiple `Role`s (please, see `AssignRoleToUser`, `UnassignRoleFromUser` commands).
//
// However, if a `User` share its functions and roles with a number of other users it can also
// join one or more `Group`s (`JoinGroup`, `LeaveGroup`).
//
// ## Organizational Structure
//
// A user is a leaf in the hierarchical structure of the organization. It can have either
// a single `Organization` or single `OrgUnit` as a parent organizational entity.
//
// ## User Attributes
//
// To make `User` meet specific requirements of the application, it can be extended by custom
// attributes.
//
// The following commands are available to work with the user attributes:
//
// * `AddUserAttribute` to add a new attribute, or replace the existing one;
// * `RemoveUserAttribute` to remove an attribute;
// * `UpdateUserAttribute` to update an existing attribute.
//
message User {
    option (entity).kind = AGGREGATE;

    core.UserId id = 1;

    // A user name to be displayed on UI.
    string display_name = 2 [(required) = true];

    // Roles explicitly assigned to the user.
    repeated RoleId role = 3;

    // Group memberships of a user.
    //
    repeated GroupId membership = 4;

    // An entity in the organizational structure a user belongs to, if applicable.
    OrganizationOrUnit org_entity = 5;

    // Attributes of a user.
    map<string, google.protobuf.Any> attributes = 6;

    // General profile information for a user.
    UserProfile profile = 7;

    // The current status of a user.
    Status status = 8 [(required) = true];

    // The primary authentication identity of a user.
    //
    // The primary identity and its provider are used as a single source of truth about a user:
    //  - to get a user profile;
    //  - to check whether a user account is active;
    //  - etc.
    //
    UserAuthIdentity primary_auth_identity = 9 [(required) = true];

    // Secondary authentication identities of a user, used solely for authentication.
    repeated UserAuthIdentity secondary_auth_identity = 10;

    // A date and a time when a user was created.
    spine.time.ZonedDateTime when_created = 11;

    // A status of a user.
    //
    enum Status {

        US_UNKNOWN = 0;

        // A user is created but not yet ready to work.
        //
        // For example, the user hasn't accepted an invitation yet, or hasn't finished registration.
        //
        NOT_READY = 1;

        // A user is active and ready to work.
        ACTIVE = 2;

        // A user is suspended by an identity provider.
        SUSPENDED = 3;
    }
}
