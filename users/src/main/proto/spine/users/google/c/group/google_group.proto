//
// Copyright 2018, TeamDev. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

syntax = "proto3";

package spine.users.google.c.group;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.users.google.c.group";
option java_outer_classname = "GoogleGroupProto";
option java_multiple_files = true;
option java_generate_equals_and_hash = true;

import "spine/users/identifiers.proto";

// A process manager that translates the terminology of Google Groups into `Users` bounded context
// language.
//
// This process manager handles external events happened with a Google Group and transforms them
// into native `Users` commands:
//
// * `GoogleGroupCreated` event into `CreateGroup` command;
// * `GoogleGroupJoinedParentGroup` event into `JoinParentGroup` command;
// * `GoogleGroupLeftParentGroup` event into `JoinParentGroup` command;
// * `GoogleGroupRenamed` event into `RenameGroup` command;
// * `GoogleGroupDeleted` event into `DeleteGroup` command;
// * `GoogleGroupEmailChanged` event into `ChangeGroupEmail` command;
// * `GoogleGroupDescriptionChanged` event into `ChangeGroupDescription` command.
//
message GoogleGroupLifecycle {
    option (entity).kind = PROCESS_MANAGER;

    // An internal identifier of the group.
    //
    // Please use `GoogleIdMappingView` projection to match `google_id` and `id`.
    //
    GroupId id = 1;
}
