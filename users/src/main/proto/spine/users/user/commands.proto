//
// Copyright 2019, TeamDev. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

syntax = "proto3";

package spine.users.user;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.users.user.command";
option java_outer_classname = "CommandsProto";
option java_multiple_files = true;
option java_generate_equals_and_hash = true;

import "spine/core/user_id.proto";
import "spine/net/internet_domain.proto";
import "spine/net/email_address.proto";
import "spine/users/identifiers.proto";
import "spine/users/user/user.proto";
import "spine/users/person_profile.proto";
import "spine/users/user/identity.proto";

// Creates a new user.
//
message CreateUser {
    option (events) = "UserCreated";

    core.UserId id = 1;

    // A kind of user: a person or machine.
    UserNature nature = 2 [(required) = true];

    // A user name to be displayed on UI.
    string display_name = 3 [(required) = true];

    // An email address of a user.
    net.EmailAddress email = 4;

    // An entity a user belongs to.
    oneof origin {

        // An organization or orgunit in one of the tenant's domains.
        OrganizationOrUnit org_entity = 5;

        // An external domain.
        net.InternetDomain external_domain = 6;
    }

    // The primary identity of the user.
    Identity primary_identity = 7;

    // A user profile, if applicable.
    PersonProfile profile = 8;

    // The current status of the user.
    User.Status status = 9 [(required) = true];
}

// Moves a user from one organization or organizational unit to another.
//
message MoveUser {
    option (events) = "UserMoved";
    option (rejections) = "CannotMoveExternalUser";

    core.UserId id = 1;

    // A new parent entity in the organizational structure.
    OrganizationOrUnit new_org_entity = 2 [(required) = true];
}

// Joins a group.
//
message JoinGroup {
    option (events) = "UserJoinedGroup";

    core.UserId id = 1;

    // An ID of a group.
    GroupId group_id = 2 [(required) = true];

    // A role of a user in the group.
    RoleInGroup role = 3 [(required) = true];
}

// Leaves a group.
//
message LeaveGroup {
    option (events) = "UserLeftGroup";

    core.UserId id = 1;

    // An ID of a group.
    GroupId group_id = 2 [(required) = true];
}

// Deletes a user.
//
message DeleteUser {
    option (events) = "UserDeleted";

    core.UserId id = 1;
}

// Assigns a role to a user.
//
message AssignRoleToUser {
    option (events) = "RoleAssignedToUser";

    core.UserId id = 1;

    // An ID of the role to assign.
    RoleId role_id = 2 [(required) = true];
}

// Removes a role assignment from a user.
//
message UnassignRoleFromUser {
    option (events) = "RoleUnassignedFromUser";
    option (rejections) = "RoleIsNotAssignedToUser";

    core.UserId id = 1;

    // An ID of the role to unassign.
    RoleId role_id = 2 [(required) = true];
}

// Changes the user status.
//
message ChangeUserStatus {
    option (events) = "UserStatusChanged";

    core.UserId id = 1;

    // A new status.
    User.Status status = 2 [(required) = true];
}

// Adds a new secondary identity to the user.
//
message AddSecondaryIdentity {
    option (events) = "SecondaryIdentityAdded";

    core.UserId id = 1;

    // An identity to add.
    Identity identity = 2 [(required) = true];
}

// Removes a secondary identity of the user.
//
message RemoveSecondaryIdentity {
    option (events) = "SecondaryIdentityRemoved";
    option (rejections) = "IdentityDoesNotExist";

    core.UserId id = 1;

    // A user identifier as specified by the authentication provider.
    string user_id = 2 [(required) = true];

    // A unique identifier of the authentication provider.
    IdentityProviderId provider_id = 3 [(required) = true];
}

// Changes the primary identity.
//
message ChangePrimaryIdentity {
    option (events) = "PrimaryIdentityChanged";

    core.UserId id = 1;

    // A new primary identity.
    Identity identity = 2 [(required) = true];
}

// Renames a user.
//
message RenameUser {
    option (events) = "UserRenamed";

    core.UserId id = 1;

    // A new name of a user.
    string new_name = 2 [(required) = true];
}

// Updates a user profile.
//
message UpdatePersonProfile {
    option (events) = "PersonProfileUpdated";

    core.UserId id = 1;

    // An updated version of a profile.
    PersonProfile updated_profile = 2 [(required) = true];
}
