//
// Copyright 2019, TeamDev. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

buildscript { final scriptHandler ->
    apply from: "$rootDir/version.gradle"
    apply from: "$rootDir/config/gradle/dependencies.gradle"

    defaultRepositories(scriptHandler)
    dependencies {
        classpath deps.build.guava
        classpath deps.build.gradlePlugins.errorProne
        classpath deps.build.gradlePlugins.protobuf
        classpath "io.spine.tools:spine-model-compiler:$spineBaseVersion"
        classpath "io.spine.tools:spine-model-verifier:$spineBaseVersion"
        classpath "io.spine.tools:spine-proto-js-plugin:$spineBaseVersion"
    }

    forceConfiguration(scriptHandler)
    configurations.all({
        resolutionStrategy {
            //TODO:2019-01-29:dmytro.grankin: remove the force dependency after v1.0 release.
            force "io.spine:spine-base:$spineBaseVersion"
            force "io.spine:spine-time:$spineVersion"
        }
    })
}

allprojects {
    apply plugin: 'maven'
    apply plugin: 'jacoco'
    apply plugin: 'idea'

    group = 'io.spine'
    version = versionToPublish

    allprojects {
        gradle.projectsEvaluated {
            tasks.withType(JavaCompile) {
                options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
            }
        }
    }
}

ext {
    projectsToPublish = ["users"]
}

subprojects {

    forceConfiguration(project)
    configurations {
        // Avoid collisions of Java classes defined both in `protobuf-lite` and `protobuf-java`
        runtime.exclude group: "com.google.protobuf", module: "protobuf-lite"
        testRuntime.exclude group: "com.google.protobuf", module: "protobuf-lite"

        all {
            resolutionStrategy {
                //TODO:2019-01-29:dmytro.grankin: remove the force dependency after v1.0 release.
                force "io.spine:spine-base:$spineBaseVersion"
                force "io.spine:spine-time:$spineVersion"
            }
        }
    }

    project.ext {
        sourcesRootDir = "$projectDir/src"
        generatedRootDir = "$projectDir/generated"

        generatedJavaDir = "$generatedRootDir/main/java"
        generatedTestJavaDir = "$generatedRootDir/test/java"

        generatedGrpcDir = "$generatedRootDir/main/grpc"
        generatedTestGrpcDir = "$generatedRootDir/test/grpc"

        generatedSpineDir = "$generatedRootDir/main/spine"
        generatedTestSpineDir = "$generatedRootDir/test/spine"

        spineModelCompilerId = 'io.spine.tools.spine-model-compiler'
    }

    apply plugin: 'com.google.protobuf'
    apply plugin: 'maven-publish'

    defaultRepositories(project)

    idea.module.iml {
        beforeMerged { final module ->
            module.dependencies.clear()
        }
        whenMerged { final module ->
            module.dependencies*.exported = true
        }
    }

    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }
}

idea.project.ipr {
    beforeMerged { final project ->
        project.modulePaths.clear()
    }
    withXml { final provider ->
        provider.node.component
                .find { it.@name == 'VcsDirectoryMappings' }
                .mapping.@vcs = 'Git'
    }
}

apply from: deps.scripts.jacoco
apply from: deps.scripts.publish
