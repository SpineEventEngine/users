//
// Copyright 2018, TeamDev. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

buildscript {
    apply from: "$rootDir/version.gradle"
    apply from: "$rootDir/config/gradle/dependencies.gradle"

    repositories {
        jcenter()
        google()

        maven { url = repos.gradlePlugins }

        mavenCentral()
        mavenLocal()
        maven { url = repos.spine }
        maven { url = repos.spineSnapshots }
    }

    dependencies {
        classpath deps.build.guava
        classpath deps.build.gradlePlugins.errorProne
        classpath deps.build.gradlePlugins.protobuf
        classpath "io.spine.tools:spine-model-compiler:$spineBaseVersion"
        classpath "io.spine.tools:spine-model-verifier:$spineBaseVersion"
    }

    configurations.all({
        resolutionStrategy {
            force deps.build.guava
        }
    })
}

allprojects {
    apply plugin: 'maven'
    apply plugin: 'jacoco'
    apply plugin: 'idea'

    group = 'io.spine'
    version = versionToPublish

    allprojects {
        gradle.projectsEvaluated {
            tasks.withType(JavaCompile) {
                options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
            }
        }
    }
}

ext {
    projectsToPublish = ["users"]
}

subprojects {

    configurations {
        // Avoid collisions of Java classes defined both in `protobuf-lite` and `protobuf-java`
        runtime.exclude group: "com.google.protobuf", module: "protobuf-lite"
        testRuntime.exclude group: "com.google.protobuf", module: "protobuf-lite"

        all {
            resolutionStrategy {
                force deps.build.guava
                force deps.test.guavaTestlib
            }
        }
    }

    project.ext {
        sourcesRootDir = "$projectDir/src"
        generatedRootDir = "$projectDir/generated"

        generatedJavaDir = "$generatedRootDir/main/java"
        generatedTestJavaDir = "$generatedRootDir/test/java"

        generatedGrpcDir = "$generatedRootDir/main/grpc"
        generatedTestGrpcDir = "$generatedRootDir/test/grpc"

        generatedSpineDir = "$generatedRootDir/main/spine"
        generatedTestSpineDir = "$generatedRootDir/test/spine"

        spineProtobufPluginId = 'io.spine.tools.spine-model-compiler'
    }

    apply plugin: 'com.google.protobuf'
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'

    apply plugin: spineProtobufPluginId

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    // Set Java home to point to JDK7 in gradle.properties file.
    //
    // For Mac OS X, it looks like this:
    //
    // # suppress inspection "UnusedProperty"
    // org.gradle.java.home=/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home/

    repositories {
        jcenter()
        google()
        maven { url = repos.gradlePlugins }
        mavenCentral()
        mavenLocal()

        maven { url = repos.spine }
        maven { url = repos.spineSnapshots }
    }

    dependencies {
        implementation deps.build.guava
        implementation deps.build.checkerAnnotations
        implementation deps.build.errorProneAnnotations
        implementation deps.build.slf4j

        compile group: 'io.spine', name: 'spine-server', version: spineVersion

        // Use jdk14 bindings for test purposes only.
        testImplementation deps.test.slf4j
        testImplementation deps.test.hamcrest
        testImplementation deps.test.mockito
        testImplementation deps.test.guavaTestlib
        testImplementation deps.test.junit5Api
        testImplementation deps.test.junit5Runner

        testCompile("io.spine:spine-testutil-server:${spineVersion}") {
            // We are using JUnit 5.x instead of 4.x dependency of Spine testing framework.
            exclude group: 'junit'
        }
    }

    sourceSets {
        main {
            proto.srcDirs "$sourcesRootDir/main/proto"
            java.srcDirs generatedJavaDir, "$sourcesRootDir/main/java", generatedSpineDir
            resources.srcDirs "$generatedRootDir/main/resources"
        }
        test {
            proto.srcDirs "$sourcesRootDir/test/proto"
            java.srcDirs generatedTestJavaDir, "$sourcesRootDir/test/java", generatedTestSpineDir
            resources.srcDirs "$generatedRootDir/test/resources"
        }
    }

    /* Uncomment this block if you need to display console output during the Gradle build.*/
    test {
        useJUnitPlatform {
            includeEngines 'junit-jupiter'
        }
    }

    apply from: "$rootDir/config/gradle/test-output.gradle"
    apply from: deps.scripts.javadocOptions

    javadoc {
        source = sourceSets.main.allJava
    }

    task sourceJar(type: Jar) {
        from sourceSets.main.allJava
        classifier "sources"
    }

    task testOutputJar(type: Jar) {
        from sourceSets.test.output
        classifier "test"
    }

    task javadocJar(type: Jar, dependsOn: 'javadoc') {
        from ("$projectDir/build/docs/javadoc")
        classifier "javadoc"
    }

    idea.module.iml {
        beforeMerged { final module ->
            module.dependencies.clear()
        }
        whenMerged { final module ->
            module.dependencies*.exported = true
        }
    }

    idea.module {
        generatedSourceDirs += file(generatedJavaDir)
        testSourceDirs += file(generatedTestJavaDir)
    }

    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }
}

idea.project.ipr {
    beforeMerged { final project ->
        project.modulePaths.clear()
    }
    withXml { final provider ->
        provider.node.component
                .find { it.@name == 'VcsDirectoryMappings' }
                .mapping.@vcs = 'Git'
    }
}

apply from: deps.scripts.jacoco
apply from: deps.scripts.publish
