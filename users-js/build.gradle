/*
 * Copyright 2018, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

apply plugin: 'com.google.protobuf'
apply plugin: 'io.spine.tools.proto-js-plugin'
// Apply `java` plugin to make `protobuf` configuration working.
apply plugin: 'java'

buildscript {

    apply from: "$rootDir/config/gradle/dependencies.gradle"

    repositories {
        maven { url = repos.gradlePlugins }
        maven { url = repos.spine }
        maven { url = repos.spineSnapshots }
    }

    dependencies {
        classpath deps.build.gradlePlugins.protobuf
        classpath "io.spine.tools:spine-proto-js-plugin:$spineBaseVersion"
    }
}

configurations {
    // Don't generate JS files for Protobufs from Spine Server.
    protobuf.exclude group: 'io.spine', module: 'spine-server'
}

dependencies {
    protobuf project(':users')
    // TODO:2018-06-23:dmytro.dashenkov: Migrate to the `implementation` config when resolved:
    // todo https://github.com/google/protobuf-gradle-plugin/issues/242
    // todo Spine issue: https://github.com/SpineEventEngine/base/issues/126
    compile group: 'io.spine', name: 'spine-server', version: spineVersion
}

ext {
    genProtoBaseDir = "$projectDir"
}

/**
 * Compiles Protobuf sources into JavaScript.
 *
 * <p>This is a lifecycle task. It performs no action but triggers all the tasks which perform
 * the compilation.
 */
task compileProtoToJs {
    description = "Compiles Protobuf sources into JavaScript."
}

protobuf {
    generatedFilesBaseDir = genProtoBaseDir
    protoc {
        artifact = deps.build.protoc
    }
    generateProtoTasks {
        all().each { final task ->
            task.builtins {
                // Do not use java builtin output in this project.
                remove java

                // For information on JavaScript code generation please see
                // https://github.com/google/protobuf/blob/master/js/README.md
                js {
                    option "import_style=commonjs"
                }

                task.generateDescriptorSet = true
                task.descriptorSetOptions.path = "${projectDir}/build/descriptors/${task.sourceSet.name}/known_types.desc"
            }
            compileProtoToJs.dependsOn task
        }
    }
}

protoJs {
    generateParsersTask().dependsOn compileProtoToJs
}

// Prevent building the JS project as a Java module.
compileJava.enabled = false
